/*2. Subqueries */

select *
from (select * from employees order by salary desc)
where rownum <=3;

--SINGLE VALUE SUBQUERIES
select max(salary) from employees;

select *
from employees
where salary = (select max(salary) from employees);

select *
from employees
where salary = (select min(salary) from employees);

--MULTIPLE VALUE SUBQUERIES
SELECT department_id
FROM departments
WHERE LOCATION_ID = 1700;


SELECT first_name, last_name, department_id
FROM employees
WHERE department_id IN (SELECT department_id
FROM departments
WHERE LOCATION_ID = 1700);


SELECT first_name, last_name, department_id
FROM employees
WHERE department_id NOT IN (SELECT department_id
FROM departments
WHERE LOCATION_ID = 1700);

--CORRELATED SUBQUERIE
SELECT EMPLOYEE_ID, salary, department_id
FROM   employees t1
WHERE salary > (SELECT avg(salary)
FROM   employees t2
WHERE t1.department_id = t2.department_id);

--MULTICOLUMN SUBQUERIES
SELECT min_salary, job_id
FROM jobs;

SELECT *
FROM employees
WHERE (salary, job_id)  in (SELECT min_salary, job_id
FROM jobs);

-- INLINE VIEWS
SELECT department_id, count(*) emp_count
FROM employees
GROUP BY department_id;

Select * from 
(SELECT department_id, count(*) emp_count
FROM employees
GROUP BY department_id) emp join departments dept on emp.department_id=dept.department_id;

select * from employees
Where commission_pct is null
Order by salary desc;

select * 
from  (select * from employees
where commission_pct is null
Order by salary desc) top_salaries
Where rownum <=3;

/*3. INDEXES */
CREATE INDEX emp_sal_idx ON employees (salary);

select * from employees where salary = 24000;

select * from employees where salary between 24000 and 2500;

CREATE INDEX emp_idx2 ON employees (salary, hire_date);

select * from employees where salary between 24000 and 2500
and hire_date < sysdate-365;

drop index emp_idx2;

/*3. DATA DICTIONARY */
select table_name from dict;

select table_name from dict
where table_name = 'ALL_TABLES';

select table_name from dict
where table_name like '%TRIGGERS%';

select table_name from dict
where table_name like '%INDEXES%';

--QUERYING DICT
select * from all_tables;

select * from user_tables;

select * from user_tables
where table_name = 'EMPLOYEES';

select * from user_tab_columns
where table_name = 'EMPLOYEES';

select * from user_ind_columns
where table_name = 'EMPLOYEES';

select username, program, machine from v$session;

select * from v$instance;

select * from v$lock;

select * from all_users;


/* DATABASE LOCKS */
SELECT username,
       osuser,
       sid,
       serial#,
       lockwait,
       status,
       module,
       machine,
       program
FROM   v$session;

/* 6. ADVANCED ORACLE SCHEMA OBJECTS */

--SEQUENCES
CREATE SEQUENCE my_seq1
MINVALUE 1
MAXVALUE 9999999 --not needed
START WITH 1
INCREMENT BY 1
CACHE 20;

Select my_seq1.CURRVAL from dual;
Select my_seq1.NEXTVAL from dual;

create table my_suppliers (supplier_id number(10), supplier_name varchar2(50))

insert into my_suppliers values (my_seq1.NEXTVAL, 'Apple');

select * from my_suppliers;

drop sequence my_seq1;

--IDENTITY COLLUMNS
CREATE TABLE identity_test1 (
id NUMBER GENERATED ALWAYS AS IDENTITY, --doesnt let id to be inserted manually
description VARCHAR2(50)
);

INSERT INTO identity_test1 (description) VALUES ('Hello World1');
INSERT INTO identity_test1 (description) VALUES ('Hello World2');
INSERT INTO identity_test1 (description) VALUES ('Hello World3');
SELECT * FROM identity_test1;


CREATE TABLE identity_test2 (
Id NUMBER GENERATED BY DEFAULT AS IDENTITY, --allows id to be inserted manually
description VARCHAR2(50)
);

INSERT INTO identity_test2 (description) VALUES ('Hello World2');
INSERT INTO identity_test2 (id,description) VALUES (2,'Hello World1');
SELECT * FROM identity_test2;

CREATE TABLE identity_test3 (
Id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 10), --increments by the specified value
description VARCHAR2(50)
);

INSERT INTO identity_test3 (description) VALUES ('Hello World1!');
INSERT INTO identity_test3 (description) VALUES ('Hello World2!');


SELECT * FROM identity_test3;

SELECT table_name, column_name, generation_type, identity_options
FROM   user_tab_identity_cols
ORDER BY 1, 2;

--TRIGGERS
--1st sample
CREATE TABLE table1 (col1 number(5), col2 varchar2(50));

CREATE TABLE table2 (col1 number(5), col2 varchar2(50));

--triggers that everything created in table 1 copies to table 2
CREATE OR REPLACE TRIGGER test_trg1 
AFTER INSERT ON table1 
FOR EACH ROW 
BEGIN 
     insert into table2 values (:new.col1 , :new.col2); 
END; 
/ 

SELECT * FROM table1;

SELECT * FROM table2;

INSERT INTO table1 VALUES (1,'Hello World!');

--2nd sample
CREATE TABLE audit_table (op_time date, col1 number(5), col2_before varchar2(50), col2_after varchar2(50));

CREATE OR REPLACE TRIGGER audit_trg
AFTER INSERT OR DELETE OR UPDATE ON table1 --when it should fire
FOR EACH ROW 
BEGIN 
     insert into audit_table values (sysdate, :new.col1 , :old.col2, :new.col2); 
END; 
/ 

UPDATE TABLE1 set col2= 'Hello World 2' where col1 = 1;

SELECT * FROM audit_table;

--PROCEDURES
CREATE OR REPLACE PROCEDURE proc1 (emp_id IN NUMBER)
IS
    emp_fname VARCHAR2(50);
BEGIN
    SELECT first_name  INTO emp_fname FROM employees where employee_id = emp_id;
    DBMS_OUTPUT.PUT_LINE('Employee name is: ' || emp_fname);
END;

SET SERVEROUTPUT ON

EXEC proc1(100)

--FUNCTIONS
CREATE OR REPLACE Function func1 (emp_id IN NUMBER)
   RETURN VARCHAR2
IS
    emp_fname VARCHAR2(50);
BEGIN
    SELECT first_name  INTO emp_fname FROM employees where employee_id = emp_id;
    RETURN emp_fname;
END;


SELECT func1(100) from dual;

SELECT func1(200) from dual;

--SYNONYM
CREATE SYNONYM emp
FOR hr.employees;


SELECT * FROM emp;

CREATE OR REPLACE SYNONYM emp
FOR hr.departments;

DROP SYNONYM emp;

CREATE OR REPLACE PUBLIC SYNONYM emp --available to all users
FOR hr.departments;

--VIEWS
--sample 1
create or replace view emp_sales
as
select * from employees where job_id = 'SA_MAN';
 
select * from emp_sales;

select * from (select * from employees where job_id = 'SA_MAN');

select * from emp_sales
where salary > 12000;

--sample 2
SELECT emp_sales.first_name, departments.department_name
FROM emp_sales JOIN departments ON emp_sales.department_id = departments.department_id;

CREATE VIEW locations_view AS
SELECT d.department_id, d.department_name, l.location_id, l.city
FROM departments d, locations l
WHERE d.location_id = l.location_id;

SELECT * FROM locations_view;

DROP VIEW emp_sales;

/* PARTITIONING */
--LIST PARTITIONING
CREATE TABLE sales_list
(
salesrep_id  NUMBER(5), 
	salesrep_name VARCHAR2(40),
	sales_state   VARCHAR2(30),
	sales_value  NUMBER(10), 
	sales_date    DATE)
PARTITION BY LIST(sales_state)
(
PARTITION sales_CA VALUES('CA'),
PARTITION sales_NY VALUES ('NY'),
PARTITION sales_central VALUES('TX', 'IL'),
PARTITION sales_other VALUES(DEFAULT)
);

INSERT INTO sales_list VALUES  (100, 'Picard', 'CA', 100, '01-JAN-2017');

INSERT INTO sales_list VALUES  (200, 'Janeway', 'NY', 500, '02-JAN-2017');

INSERT INTO sales_list VALUES  (300, 'Kirk', 'TX', 1000, '03-JAN-2017');
INSERT INTO sales_list VALUES  (100, 'Picard', 'IL', 500, '04-JAN-2017');

select * from sales_list;


SELECT COUNT(*) FROM sales_list partition (sales_ca);
SELECT COUNT(*) FROM sales_list partition (sales_ny);
SELECT COUNT(*) FROM sales_list partition (sales_central);
SELECT COUNT(*) FROM sales_list partition (sales_other);


INSERT INTO sales_list VALUES  (200, 'Janeway', 'FL', 999, '05-JAN-2017');


SELECT COUNT(*) FROM sales_list partition (sales_other);

ALTER TABLE sales_list
SPLIT PARTITION sales_other VALUES ('NV') 
INTO 
(PARTITION sales_nv,
PARTITION sales_other);

SELECT count(*) FROM SALES_LIST PARTITION (sales_nv);

INSERT INTO sales_list VALUES  (300, 'Kirk', 'NV', 2300, '01-JAN-2017');


SELECT count(*) FROM SALES_LIST PARTITION (sales_nv);

--RANGE PARTITIONING
CREATE TABLE sales_range 
(
salesrep_id  NUMBER(5), 
salesrep_name VARCHAR2(30), 
sales_amount  NUMBER(10), 
sales_date    DATE)
PARTITION BY RANGE(sales_date) 
(
PARTITION sales_jan2017 VALUES LESS THAN(TO_DATE('01/02/2017','DD/MM/YYYY')),
PARTITION sales_feb2017 VALUES LESS THAN(TO_DATE('01/03/2017','DD/MM/YYYY')),
PARTITION sales_mar2017 VALUES LESS THAN(TO_DATE('01/04/2017','DD/MM/YYYY')),
PARTITION sales_apr2017 VALUES LESS THAN(TO_DATE('01/05/2017','DD/MM/YYYY'))
);


INSERT INTO sales_range VALUES  (100, 'Picard', 100, '01-JAN-2017');

SELECT COUNT(*) FROM sales_range partition (sales_jan2017);



INSERT INTO sales_range VALUES  (100, 'Picard', 100, '01-FEB-2017');

SELECT COUNT(*) FROM sales_range partition (sales_feb2017);



INSERT INTO sales_range VALUES  (100, 'Picard', 100, '01-MAY-2017');

SELECT COUNT(*) FROM sales_range partition (sales_may2017);



ALTER TABLE sales_range  
ADD PARTITION sales_may2017 VALUES LESS THAN(TO_DATE('01/06/2017','DD/MM/YYYY'))

--HASH PARTITIONING
CREATE TABLE sales_hash
(
salesrep_id  NUMBER(5), 
salesrep_name VARCHAR2(30), 
sales_amount  NUMBER(10), 
sale_no       NUMBER(5)) 
PARTITION BY HASH(sale_no) 
PARTITIONS 4 ;

ANALYZE TABLE sales_hash COMPUTE STATISTICS;

SELECT table_name, partition_name, num_rows FROM user_tab_partitions
WHERE table_name = 'SALES_HASH';

INSERT INTO sales_hash VALUES (100,'Picard', 500, 1423);

ANALYZE TABLE sales_hash COMPUTE STATISTICS;

SELECT table_name, partition_name, num_rows FROM user_tab_partitions
WHERE table_name = 'SALES_HASH';


INSERT INTO sales_hash VALUES (100,'Picard', 500, 1423);
INSERT INTO sales_hash VALUES (100,'Picard', 600, 1424);
INSERT INTO sales_hash VALUES (100,'Picard', 200, 1425);
INSERT INTO sales_hash VALUES (100,'Picard', 100, 1426);
INSERT INTO sales_hash VALUES (100,'Picard', 500, 1427);
INSERT INTO sales_hash VALUES (100,'Picard', 600, 1428);
INSERT INTO sales_hash VALUES (100,'Picard', 200, 1429);
INSERT INTO sales_hash VALUES (100,'Picard', 100, 1430);

ANALYZE TABLE sales_hash COMPUTE STATISTICS;

SELECT table_name, partition_name, num_rows FROM user_tab_partitions
WHERE table_name = 'SALES_HASH';